#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: My emacs configuration
#+DATE: <2017-09-22 Fri>
#+AUTHOR: Daniel Furtado
#+EMAIL: daniel@dfurtado.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 24.4.1 (Org mode 9.0.3)

* Init
#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path "/home/daniel/.emacs.d/themes")
  (setq ring-bell-function 'ignore)
  (setq python-indent-offset 4)

  (highlight-indentation-mode 0)
  (setq-default indent-tabs-mode nil)

  (set-default-font "-*-Hack-normal-normal-normal-*-18-*-*-*-m-0-iso10646-1")
  (when (fboundp 'winner-mode)
    (winner-mode 1))
#+END_SRC

* Theme
#+BEGIN_SRC emacs-lisp
  (use-package base16-theme
    :config
    (load-theme 'base16-gruvbox-dark-pale t))
#+END_SRC

* Load/install require packages
** Evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :config
    (evil-mode 1))
#+END_SRC
** Evil surround
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (global-set-key (kbd "C-x l") 'magit-log)
    (global-set-key (kbd "C-x g") 'magit-status)
    (global-set-key (kbd "C-x M-g") 'magit-dispatch-popup))
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (projectile-global-mode)
    (setq projectile-switch-project-action 'helm-projectile-find-file)
    (helm-projectile-on))
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5))))
#+END_SRC
** Windmove
#+BEGIN_SRC emacs-lisp
  (use-package windmove
    :config
    (when (fboundp 'windmove-default-keybindings)
      (windmove-default-keybindings)))
#+END_SRC

** Elpy
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :config
    (elpy-enable)
    (setq elpy-rpc-backend "jedi")
    (define-key yas-minor-mode-map (kbd "C-c k") 'yas-expand))
#+END_SRC

** Whitespace cleanup
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'whitespace-cleanup)
#+END_SRC

** Org Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets)
#+END_SRC

** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :config
    (global-set-key (kbd "C-x f") 'helm-find))
#+END_SRC
** Virtualenvwrapper
#+BEGIN_SRC emacs-lisp
  (use-package virtualenvwrapper
    :config
    (setq venv-location "/home/daniel/.virtualenvs"))
#+END_SRC

** Golden ratio
#+BEGIN_SRC emacs-lisp
  (use-package golden-ratio
    :config
    (golden-ratio-mode 1))
#+END_SRC
* Org mode
#+BEGIN_SRC emacs-lisp
  (setq org-fontify-done-headline t)
  (setq org-fontify-quote-and-verse-blocks t)
  (setq org-fontify-whole-heading-line t)
  (add-hook 'org-mode-hook
            (lambda ()
              (org-bullets-mode t)))
#+END_SRC

* Helm mode
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-x") #'helm-M-x)
  (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
  (global-set-key (kbd "C-x C-f") #'helm-find-files)

  (helm-mode 1)
#+END_SRC
* Airline
#+BEGIN_SRC emacs-lisp
  (use-package airline-themes
    :config
    (setq powerline-utf-8-separator-left        #xe0b0
          powerline-utf-8-separator-right       #xe0b2
          airline-utf-glyph-separator-left      #xe0b0
          airline-utf-glyph-separator-right     #xe0b2
          airline-utf-glyph-subseparator-left   #xe0b1
          airline-utf-glyph-subseparator-right  #xe0b3
          airline-utf-glyph-branch              #xe0a0
          airline-utf-glyph-readonly            #xe0a2
          airline-utf-glyph-linenumber          #xe0a1)
    (load-theme 'airline-ubaryd t))
#+END_SRC
* Custom functions
** IRC
#+BEGIN_SRC emacs-lisp
(defun irc ()
    "Connect to the freenode"
    (interactive)
    (erc :server "irc.freenode.net"
         :port 6667
         :nick "retro-programmer"
         :password ""))
#+END_SRC

** Toggle 2 split windows
#+BEGIN_SRC emacs-lisp
  (defun toggle-window-split ()
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (this-win-edges (window-edges (selected-window)))
               (next-win-edges (window-edges (next-window)))
               (this-win-2nd (not (and (<= (car this-win-edges)
                                           (car next-win-edges))
                                       (<= (cadr this-win-edges)
                                           (cadr next-win-edges)))))
               (splitter
                (if (= (car this-win-edges)
                       (car (window-edges (next-window))))
                    'split-window-horizontally
                  'split-window-vertically)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (if this-win-2nd (other-window 1))
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)
            (if this-win-2nd (other-window 1))))))
#+END_SRC

** Rotate window content
#+BEGIN_SRC emacs-lisp
  (defun rotate-windows ()
    "Rotate your windows"
    (interactive)
    (cond ((not (> (count-windows)1))
           (message "You can't rotate a single window!"))
          (t
           (setq i 1)
           (setq numWindows (count-windows))
           (while  (< i numWindows)
             (let* (
                    (w1 (elt (window-list) i))
                    (w2 (elt (window-list) (+ (% i numWindows) 1)))

                    (b1 (window-buffer w1))
                    (b2 (window-buffer w2))

                    (s1 (window-start w1))
                    (s2 (window-start w2))
                    )
               (set-window-buffer w1  b2)
               (set-window-buffer w2 b1)
               (set-window-start w1 s2)
               (set-window-start w2 s1)
               (setq i (1+ i)))))))

#+END_SRC
** Rename current buffer file
#+BEGIN_SRC emacs-lisp
  (defun rename-current-buffer-file ()
    "Renames current buffer and file it is visiting."
    (interactive)
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (error "Buffer '%s' is not visiting a file!" name)
        (let ((new-name (read-file-name "New name: " filename)))
          (if (get-buffer new-name)
              (error "A buffer named '%s' already exists!" new-name)
            (rename-file filename new-name 1)
            (rename-buffer new-name)
            (set-visited-file-name new-name)
            (set-buffer-modified-p nil)
            (message "File '%s' successfully renamed to '%s'"
                     name (file-name-nondirectory new-name)))))))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))

  (defun magit-quit-session ()
    "Restores the previous window configuration and kills the magit buffer"
    (interactive)
    (kill-buffer)
    (jump-to-register :magit-fullscreen))

  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)
#+END_SRC

* Key Bindings
** custom functions
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c i") 'irc)
  (global-set-key (kbd "C-x C-r") 'rename-current-buffer-file)
  (global-set-key (kbd "C-x C-w") 'rotate-windows)
  (global-set-key (kbd "C-x C-t") 'toggle-window-split)
#+END_SRC

** Frames
#+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
     (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
     (global-set-key (kbd "S-C-<down>") 'shrink-window)
     (global-set-key (kbd "S-C-<up>") 'enlarge-window)
#+END_SRC
** Misc
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c w") 'whitespace-mode)
  (global-set-key (kbd "C-c t") 'removetabs)

  (global-set-key (kbd "C-S-n")
                  (lambda ()
                    (interactive)
                    (ignore-errors (next-line 5))))

  (global-set-key (kbd "C-S-p")
                  (lambda ()
                    (interactive)
                    (ignore-errors (previous-line 5))))

  (global-set-key (kbd "C-S-f")
                  (lambda ()
                    (interactive)
                    (ignore-errors (forward-char 5))))

  (global-set-key (kbd "C-S-b")
                  (lambda ()
                    (interactive)
                    (ignore-errors (backward-char 5))))


#+END_SRC
